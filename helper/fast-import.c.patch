diff --git a/builtin/fast-import.c b/builtin/fast-import.c
index 28d3193c38..2b3aeaa4d5 100644
--- a/builtin/fast-import.c
+++ b/builtin/fast-import.c
@@ -20,6 +20,7 @@
 #include "commit-reach.h"
 #include "khash.h"
 #include "date.h"
+#include "shallow.h"
 
 #define PACK_ID_BITS 16
 #define MAX_PACK_ID ((1<<PACK_ID_BITS)-1)
@@ -257,7 +258,7 @@ static struct string_list sub_marks_to = STRING_LIST_INIT_DUP;
 static kh_oid_map_t *sub_oid_map;
 
 /* Where to write output of cat-blob commands */
-static int cat_blob_fd = STDOUT_FILENO;
+int cat_blob_fd = STDOUT_FILENO;
 
 static void parse_argv(void);
 static void parse_get_mark(const char *p);
@@ -746,7 +747,7 @@ static struct tree_content *dup_tree_content(struct tree_content *s)
 	return d;
 }
 
-static void start_packfile(void)
+static void real_start_packfile(void)
 {
 	struct strbuf tmp_file = STRBUF_INIT;
 	struct packed_git *p;
@@ -847,7 +848,7 @@ static int loosen_small_pack(const struct packed_git *p)
 	return run_command(&unpack);
 }
 
-static void end_packfile(void)
+static void real_end_packfile(void)
 {
 	static int running;
 
@@ -866,6 +867,7 @@ static void end_packfile(void)
 
 		close_pack_windows(pack_data);
 		finalize_hashfile(pack_file, cur_pack_oid.hash, FSYNC_COMPONENT_PACK, 0);
+		pack_file = NULL;
 		fixup_pack_header_footer(pack_data->pack_fd, pack_data->hash,
 					 pack_data->pack_name, object_count,
 					 cur_pack_oid.hash, pack_size);
@@ -965,6 +967,9 @@ static int store_object(
 		e->pack_id = MAX_PACK_ID;
 		e->idx.offset = 1; /* just not zero! */
 		duplicate_count_by_type[type]++;
+		if (type == OBJ_COMMIT) {
+			cinnabar_unregister_shallow(&oid);
+		}
 		return 1;
 	}
 
@@ -1648,7 +1653,7 @@ static int update_branch(struct branch *b)
 	return 0;
 }
 
-static void dump_branches(void)
+void dump_branches(void)
 {
 	unsigned int i;
 	struct branch *b;
@@ -2217,7 +2222,9 @@ static int parse_mapped_oid_hex(const char *hex, struct object_id *oid, const ch
  * Complain if the following character is not what is expected,
  * either a space or end of the string.
  */
-static uintmax_t parse_mark_ref(const char *p, char **endptr)
+static uintmax_t parse_mark_ref(const char *p, char **endptr);
+
+static uintmax_t real_parse_mark_ref(const char *p, char **endptr)
 {
 	uintmax_t mark;
 
@@ -2281,9 +2288,8 @@ static void file_change_m(const char *p, struct branch *b)
 	case S_IFDIR:
 	case S_IFGITLINK:
 		/* ok */
-		break;
 	default:
-		die("Corrupt mode: %s", command_buf.buf);
+		break;
 	}
 
 	if (*p == ':') {
